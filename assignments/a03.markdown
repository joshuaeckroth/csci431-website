---
layout: note
title: "A03: Connect Four AI"
due: "Sep 19, 11:59pm"
categories: [assignments]
---

# A03: Connect Four AI

This assignment helps you practice with adversarial search, specifically minimax with alpha-beta pruning. Your task is to improve a realization of a Connect Four AI.

## Background

The game Connect Four is a classic example of zero-sum, deterministic, perfect information games. Just like tic-tac-toe, both players can see the entire state of the game, there is no randomness involved (no dice, for example), and only one player can win all the points (so it's zero-sum).

We'll use the following simple rules for our variation of the game:

- The game is played on a grid of 7 horizontal positions and 6 vertical positions.
- Players alternate adding one token to the grid. A token may be added to any column that is not full, and the token falls to the lowest free slot on that column.
- The first player to get four tokens in a row or diagonally with no gaps wins.

Because Connect Four is a zero-sum, deterministic, perfect information game, we can build an AI with minimax. Of course, we're not crazy, so we'll use alpha-beta pruning as well, since alpha-beta pruning is an optimization that doesn't change the best move that minimax would normally find.

I have implemented the Connect Four game and an AI. Find it on londo at `/home/jeckroth/csci431/assignments/A03/connect-four.py`.

## Analysis of AI performance

If we allow the minimax-driven AI to search all possible moves (to maximum depth), the AI will produce perfect play. However, that's not possible since there are about 4.5 quadrillion possible game states. Limiting the depth of the search tree solves our problem and gives a good (though not perfect) AI.

The `connect-four.py` code has a function, `experiment()`, that generates various random starting configurations with different numbers of pre-established moves, and then runs vanilla minimax and minimax with alpha-beta pruning. We would expect that alpha-beta pruning will result in significantly fewer examined states. This expectation is met in the plot below. We see that different maximum search depths result in different kinds of savings with alpha-beta. Specifically, very deep search (six moves ahead) results in extreme savings: with no pre-established moves, alpha-beta pruning reduces the search space by about 99% (about 135k searched states vs. about 1300 searched states).

![Connect Four alpha-beta pruning on/off](/images/connect-four-ab-depth-experiment.png)

## Task

Your task is to improve the provided Connect Four AI implementation, which uses minimax plus alpha-beta pruning, so that the AI is even more efficient. Your improvements must reduce the number of states examined.

- Examine the code in `connect-four.py`. You'll find three functions that effectively do nothing (each marked with TODO):
  - `possible_transitions_improved`
  - `utility_improved`
  - `estimate_utility_improved`
- Write new definitions for those three functions that produce a more efficient search.

Test your improvements by running the `test-connect-four.sh` script. That script will run `connect-four.py` and save the output to a CSV file; it will then produce a statistical summary of the results plus a plot.

## Deliverables

Turn in the improved `connect-four.py` script.

## Advice

Consider the impact each of the following have on minimax and alpha-beta pruning:

- the order "possible transitions" are examined, depending on whether the search is minimizing or not
- the accuracy of the utility function
- the accuracy of the estimated utility function

Also, consider modifying the last lines in the Python code to execute `game_loop()` instead of the experiment function. The game loop function will allow you to play the game interactively.

